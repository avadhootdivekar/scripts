// Code generated by MockGen. DO NOT EDIT.
// Source: modA.go

// Package mock_modA is a generated GoMock package.
package mock_modA

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockmyInterface is a mock of myInterface interface.
type MockmyInterface struct {
	ctrl     *gomock.Controller
	recorder *MockmyInterfaceMockRecorder
}

// MockmyInterfaceMockRecorder is the mock recorder for MockmyInterface.
type MockmyInterfaceMockRecorder struct {
	mock *MockmyInterface
}

// NewMockmyInterface creates a new mock instance.
func NewMockmyInterface(ctrl *gomock.Controller) *MockmyInterface {
	mock := &MockmyInterface{ctrl: ctrl}
	mock.recorder = &MockmyInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmyInterface) EXPECT() *MockmyInterfaceMockRecorder {
	return m.recorder
}

// MyMethodA mocks base method.
func (m *MockmyInterface) MyMethodA() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MyMethodA")
	ret0, _ := ret[0].(string)
	return ret0
}

// MyMethodA indicates an expected call of MyMethodA.
func (mr *MockmyInterfaceMockRecorder) MyMethodA() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MyMethodA", reflect.TypeOf((*MockmyInterface)(nil).MyMethodA))
}

// MyMethodB mocks base method.
func (m *MockmyInterface) MyMethodB(arg0 int) float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MyMethodB", arg0)
	ret0, _ := ret[0].(float64)
	return ret0
}

// MyMethodB indicates an expected call of MyMethodB.
func (mr *MockmyInterfaceMockRecorder) MyMethodB(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MyMethodB", reflect.TypeOf((*MockmyInterface)(nil).MyMethodB), arg0)
}
